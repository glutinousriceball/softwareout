<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wjm.softwareout.system.dao.RoleMapper">
    <resultMap id="BaseResultMap" type="com.wjm.softwareout.system.entity.Role">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="remark" jdbcType="VARCHAR" property="remark"/>
        <result column="available" jdbcType="INTEGER" property="available"/>
    </resultMap>
    <sql id="Base_Column_List">
            id,
            name,
            remark,
            available
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from sys_role
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from sys_role
        where id = #{id,jdbcType=INTEGER}
    </delete>



    <insert id="insert" parameterType="com.wjm.softwareout.system.entity.Role">
        insert into sys_role (id, name, remark,
                              available)
        values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR},
                #{available,jdbcType=INTEGER})
    </insert>


    <insert id="insertSelective" parameterType="com.wjm.softwareout.system.entity.Role">
        insert into sys_role
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="remark != null">
                remark,
            </if>
            <if test="available != null">
                available,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="remark != null">
                #{remark,jdbcType=VARCHAR},
            </if>
            <if test="available != null">
                #{available,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.wjm.softwareout.system.entity.Role">
        update sys_role
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="remark != null">
                remark = #{remark,jdbcType=VARCHAR},
            </if>
            <if test="available != null">
                available = #{available,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.wjm.softwareout.system.entity.Role">
        update sys_role
        set name      = #{name,jdbcType=VARCHAR},
            remark    = #{remark,jdbcType=VARCHAR},
            available = #{available,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <!--根据name remark available 条件查询权限列表，如果没有则全查询-->
    <select id="selectAllRole" parameterType="com.wjm.softwareout.system.vo.RoleVo" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from sys_role
        <where>
            <if test="roleVo.name != null">
                name like concat("%",#{roleVo.name},"%")
            </if>
            <if test="roleVo.remark != null">
                and remark like concat("%",#{roleVo.remark},"%")
            </if>
            <if test="roleVo.available != null">
                and available = #{roleVo.available}
            </if>
        </where>
    </select>
    <!--计算角色名称是否重复-->
    <select id="countByName" parameterType="map" resultType="int">
        select count(1)
        from sys_role
        <where>
            <if test="name != null">
                name = #{name}
            </if>
            <if test="roleId != null">
                and id != #{roleId}
            </if>
        </where>
    </select>
    <!--根据roleId删除对应权限-->
    <delete id="deleteOriginPermissions" parameterType="integer">
        delete
        from sys_role_permission
        where rid = #{roleId}
    </delete>
    <!--保存角色权限的关系-->
    <insert id="insertRolePermissions" parameterType="map">
        insert into sys_role_permission
            (rid, pid)
        values (#{roleId}, #{permissionId})
    </insert>
    <!--根据用户ID查询所拥有的的角色-->
    <select id="selectUserRoleByUserId" parameterType="integer" resultMap="BaseResultMap">
        select sr.*
        from sys_role sr
                 left join sys_role_user sru on sr.id = sru.rid
        where sru.uid = #{userId}
    </select>
    <!--根据用户ID删除用户原来的角色-->
    <delete id="deleteUserRoleByUserId" parameterType="integer">
        delete from sys_role_user
        where uid = #{userId}
    </delete>
    <!--保存用户角色关系-->
    <insert id="insertUserRole" parameterType="map">
        insert into sys_role_user
            (rid, uid)
        values (#{roleId}, #{userId})
    </insert>
</mapper>