<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
         http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

    <!--集成shiro过滤器开始-->
    <!--说明：shiro过虑器，DelegatingFilterProxy通过代理模式将spring容器中的bean和filter关联起来-->
    <filter>
        <filter-name>shiroFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
        <!--设置为true由servlet容器控制filter声明周期-->
        <init-param>
            <param-name>targetFilterLifecycle</param-name>
            <param-value>true</param-value>
        </init-param>
        <!-- 设置spring容器filter的bean id，如果不设置则找与filter-name一致的bean -->
        <init-param>
            <param-name>targetBeanName</param-name>
            <param-value>shiroFilter</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>shiroFilter</filter-name>
        <!-- 拦截所有的url 包括 css js image 等等 -->
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!--shiro集成结束-->

    <!-- 配置编码过滤器 开始 -->
    <filter>
        <filter-name>charset</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>

        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>charset</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!-- 配置编码过滤器 结束 -->

    <!--配置druid开始-->
    <servlet>
        <servlet-name>statViewServlet</servlet-name>
        <servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
        <!--初始化druid监控页面的账户面，可以不填写-->
        <!--<init-param>-->
        <!--<param-name>loginUsername</param-name>-->
        <!--<param-value>admin</param-value>-->
        <!--</init-param>-->
        <!--<init-param>-->
        <!--<param-name>loginPassword</param-name>-->
        <!--<param-value>123456</param-value>-->
        <!--</init-param>-->
        <init-param>
            <param-name>allow</param-name>
            <param-value>127.0.0.1</param-value>
        </init-param>
        <init-param>
            <param-name>deny</param-name>
            <param-value>127.0.0.2</param-value>
        </init-param>
    </servlet>
    <!--配置druid访问的接口-->
    <servlet-mapping>
        <servlet-name>statViewServlet</servlet-name>
        <url-pattern>/druid/*</url-pattern>
    </servlet-mapping>
    <filter>
        <filter-name>webStatFilter</filter-name>
        <filter-class>com.alibaba.druid.support.http.WebStatFilter</filter-class>
        <init-param>
            <param-name>exclusions</param-name>
            <param-value>*.js,*.css,*.jpg,*.png,*.ico,*.gif,*.woff,/druid/*</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>webStatFilter</filter-name>
        <!--拦截所有的url-->
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!--配置druid结束-->

    <!-- 配置spring的监听器加载applicationContext.xml 开始 -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <!--spring beans配置文件所在的路径-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:applicationContext.xml</param-value>
    </context-param>
    <!-- 配置spring的监听器加载applicationContext.xml 结束 -->

    <!--spring mvc 的配置-->
    <!-- 配置前端控制器 开始 -->
    <servlet>
        <servlet-name>springMVC</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- 配置配置文件的地址 让ioc容器去解析xml 如果不相配置contextConfigLocation 那么
        spring-mvc.xml的名字要改成springmvc-servlet.xml 核心配置文件的名称必须是
        前端控制器的servlet-name+-servlet.xml -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <!-- 配置servlet在tomcat启动的时候就创建对象 -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springMVC</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
    <!--&lt;!&ndash;logback日志&ndash;&gt;-->
    <!--<context-param>-->
        <!--<param-name>logbackConfigLocation</param-name>-->
        <!--<param-value>classpath:logback.xml</param-value>-->
    <!--</context-param>-->
    <!-- 配置前端控制器 结束 -->
    <welcome-file-list>
        <welcome-file>/index.jsp</welcome-file>
    </welcome-file-list>
</web-app>
